package ${basePackage}${actionPath};

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.google.common.collect.Lists;
import nxcloud.base.common.entity.PageInfo;
import nxcloud.base.compose.scaffold.api.annotation.NxcloudAction;
import nxcloud.base.provider.core.jpa.search.SearchFilter;
import nxcloud.base.provider.core.jpa.search.SearchResult;
import nxcloud.base.utils.BeanMapper;
import ${basePackage}${doPath}.${className};
import ${basePackage}${reqPath}.Query${className}Request;
import ${basePackage}${reqPath}.GetByUnique${className}Request;
import ${basePackage}${reqPath}.QueryByUnique${className}Request;
import ${basePackage}${reqPath}.Create${className}Request;
import ${basePackage}${reqPath}.Delete${className}Request;
import ${basePackage}${reqPath}.Update${className}Request;
import ${basePackage}${rspPath}.${className}Response;
import ${basePackage}${apiPath}.${className}Api;
import ${basePackage}${servicePath}.LocalService;

#foreach ($import in $importList)
import ${import};
#end
import java.util.List;
import java.util.stream.Collectors;

@NxcloudAction
public class ${className}Action implements ${className}Api {

    @Override
    public PageInfo<${className}Response> query(Query${className}Request request) {

        SearchFilter.SearchFilterBuilder builder = SearchFilter.builder();

        #foreach($column in $columns)
            #if(${column.isNum()})
        if (request.get${column.getCapJavaField()}() != null) {
            builder.eq(${className}.Fields.${column.javaField}, request.get${column.getCapJavaField()}());
        }
            #elseif(${column.isString()})
        if (StrUtil.isNotEmpty(request.get${column.getCapJavaField()}())) {
            #if(${column.containName()})
            builder.like(${className}.Fields.${column.javaField}, request.get${column.getCapJavaField()}());
            #else
            builder.eq(${className}.Fields.${column.javaField}, request.get${column.getCapJavaField()}());
            #end
        }
            #elseif(${column.isTime()})
        if (ObjectUtil.isAllNotEmpty(request.get${column.getCapJavaField()}Start(),request.get${column.getCapJavaField()}End())) {
            builder.betwee(${className}.Fields.${column.javaField}, request.get${column.getCapJavaField()}Start(),request.get${column.getCapJavaField()}End());
        }
            #end

        #end

        SearchResult<${className}> result = LocalService.${className}Service.findAll(builder.build());

        return PageInfo.<${className}Response>builder()
                .total((int) result.getTotal())
                .list(CollUtil.isEmpty(result.getPagedData()) ? Lists.newArrayList()
                        : result.getPagedData()
                        .stream()
                        .map(item-> BeanMapper.map(item,${className}Response.class))
                        .collect(Collectors.toList()))
                .build();
    }

    @Override
    List<${className}Response> getByUnique(GetByUnique${className}Request request) {
        return null;
    }

    @Override
    List<${className}Response> queryByUnique(QueryByUnique${className}Request request) {
        return null;
    }

    @Override
    ${className}Response create(Create${className}Request request) {
        return null;
    }

    @Override
    void update(Update${className}Request request) {

    }

    @Override
    void delete(Delete${className}Request request) {

    }

}
