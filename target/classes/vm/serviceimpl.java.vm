package ${basePackage}${serviceImplPath};

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import nxcloud.base.core.exception.DataAlreadyExistException;
import nxcloud.base.core.exception.DataNotExistException;
import nxcloud.base.provider.core.jpa.search.SearchFilter;
import nxcloud.base.provider.core.jpa.search.SearchResult;
import nxcloud.base.provider.core.jpa.specification.FindAllHelper;
import nxcloud.base.utils.BeanCopyUtils;
import nxcloud.base.utils.BeanMapper;
import ${basePackage}${doPath}.${className};
import ${basePackage}${servicePath}.${className}Service;
import ${basePackage}${daoPath}.${className}DAO;
import ${basePackage}${poPath}.${className}PO;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class ${className}ServiceImpl implements ${className}Service {

    private final ${className}DAO dao;

    public ${className} po2do(${className}PO po) {
        return BeanMapper.map(po, ${className}.class);
    }

    public ${className}PO do2po(${className} model) {
        return BeanMapper.map(model, ${className}PO.class);
    }

#foreach ($column in $columns)
    #if(${column.isUniqueColumn()})
    @Override
    public Optional<${className}> findBy${column.getCapJavaField()}(${column.javaType} ${column.javaField}) {
        return dao.findBy${column.getCapJavaField()}(${column.javaField}).map(this::po2do);
    }

    @Override
    public List<${className}> findAllBy${column.getCapJavaField()}s(List<${column.javaType}> ${column.javaField}s) {
        return dao.findBy${column.getCapJavaField()}In(${column.javaField}s).stream().map(this::po2do).collect(Collectors.toList());
    }

    #end
    #if(${column.isPkColumn()})
    @Override
    public Optional<${className}> findBy${column.getCapJavaField()}(${column.javaType} ${column.javaField}) {
        return dao.findById(${column.javaField}).map(this::po2do);
    }

    @Override
    public List<${className}> findAllBy${column.getCapJavaField()}s(List<${column.javaType}> ${column.javaField}s) {
        return dao.findAllById(${column.javaField}s).stream().map(this::po2do).collect(Collectors.toList());
    }

    @Override
    @Transactional
    public void delete(List<${column.javaType}> ${column.javaField}s) {
        dao.deleteAllById(${column.javaField}s);
    }

    #end
#end
    @Override
    public SearchResult<${className}> findAll(SearchFilter searchFilter) {
        return FindAllHelper.findAll(searchFilter, dao, this::po2do);
    }

    @Override
    @Transactional
    public ${className} create(${className} create) {
    #foreach ($uk in $uniqueColumns)
        Optional<${className}PO> optional = dao.findBy${uk.getCapJavaField()}(create.get${uk.getCapJavaField()}());
        if (optional.isPresent()) {
            throw new DataAlreadyExistException();
        }
    #end
        ${className}PO po = dao.save(this.do2po(create));
        return this.po2do(po);
    }

    @Override
    @Transactional
    public ${className} update(${className} update) {
        ${className}PO po = dao.findByIdForUpdate(update.get${pkFieldNameCap}()).orElseThrow(DataNotExistException::new);
        BeanCopyUtils.copyNonNullProperties(po, update);
        return this.po2do(po);
    }

}
